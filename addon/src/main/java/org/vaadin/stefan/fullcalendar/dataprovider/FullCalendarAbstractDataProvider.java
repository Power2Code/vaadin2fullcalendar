package org.vaadin.stefan.fullcalendar.dataprovider;

import com.vaadin.flow.function.SerializableConsumer;
import com.vaadin.flow.shared.Registration;
import org.vaadin.stefan.fullcalendar.Entry;
import org.vaadin.stefan.fullcalendar.dataprovider.FullCalendarDataChangeEvent.FullCalendarDataChangeListener;
import org.vaadin.stefan.fullcalendar.dataprovider.FullCalendarDataRefreshEvent.FullCalendarDataRefreshListener;

import java.util.*;
import java.util.function.Consumer;

/**
 * @author Stefan Uebe
 */
public abstract class FullCalendarAbstractDataProvider<T extends Entry> implements FullCalendarDataProvider<T> {
    private final Map<Class<?>, List<SerializableConsumer<?>>> listeners = new HashMap<>();

    @Override
    public void refreshAll() {
        fireEvent(new FullCalendarDataChangeEvent<>(this));
    }

    @Override
    public void refreshItem(T item) {
        fireEvent(new FullCalendarDataRefreshEvent<>(this, item));
    }

    /**
     * Registers a new listener with the specified activation method to listen
     * events generated by this component. If the activation method does not
     * have any arguments the event object will not be passed to it when it's
     * called.
     *
     * @param eventType
     *            the type of the listened event. Events of this type or its
     *            subclasses activate the listener.
     * @param method
     *            the consumer to receive the event.
     * @param <E>
     *            the event type
     * @return a registration for the listener
     */
    protected <E> Registration addListener(Class<E> eventType, SerializableConsumer<E> method) {
        List<SerializableConsumer<?>> list = listeners.computeIfAbsent(eventType, key -> new ArrayList<>());

        return Registration.addAndRemove(list, method);
    }

    protected Registration addDataChangeListener(FullCalendarDataChangeListener<T> listener) {
        return addListener(FullCalendarDataChangeEvent.class, listener::onDataChange);
    }

    protected Registration addDataRefreshListener(FullCalendarDataRefreshListener<T> listener) {
        return addListener(FullCalendarDataRefreshEvent.class, listener::onDataRefresh);
    }

    /**
     * Sends the event to all listeners.
     *
     * @param event
     *            the Event to be sent to all listeners.
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected void fireEvent(EventObject event) {
        listeners.entrySet().stream()
                .filter(entry -> entry.getKey().isAssignableFrom(event.getClass()))
                .forEach(entry -> {
                    for (Consumer consumer : entry.getValue()) {
                        consumer.accept(event);
                    }
                });
    }


}
